import os
import ast
import re
from collections import defaultdict
from openpyxl import Workbook
from openpyxl.styles import Font

# Reuse or define your check_* functions and Rule class here (from previous code)

# Add severity mapping
severity_map = {
    "Hardcoded Secrets": "High",
    "Prompt Injection Risk": "High",
    "Command Injection": "High",
    "Unsafe Eval/Exec Use": "Medium",
    "Logging/Exception Handling": "Medium",
    "Parsing Error": "Low"
}

def scan_code(code_str):
    issues_found = []
    try:
        tree = ast.parse(code_str)
    except Exception as parse_err:
        issues_found.append({
            "rule": "Parsing Error",
            "line": 0,
            "description": f"Code parsing failed: {parse_err}",
            "severity": severity_map["Parsing Error"]
        })
        return issues_found

    for rule in rules:
        results = rule.run(tree, code_str)
        for res in results:
            issues_found.append({
                "rule": rule.name,
                "line": res["line"],
                "description": res["issue"],
                "severity": severity_map.get(rule.name, "Medium")
            })
    return issues_found

def audit_directory(directory_path):
    results = []
    for root, _, files in os.walk(directory_path):
        for fname in files:
            if fname.endswith(".py"):
                fpath = os.path.join(root, fname)
                with open(fpath, 'r', encoding='utf-8') as f:
                    code = f.read()
                    issues = scan_code(code)
                    for issue in issues:
                        issue["file"] = fpath
                        results.append(issue)
    return results

def export_to_excel(results, output_path="audit_results.xlsx"):
    wb = Workbook()
    detail_ws = wb.active
    detail_ws.title = "Detailed Findings"
    summary_ws = wb.create_sheet(title="Agent Scorecard")

    # Write header for findings
    detail_ws.append(["File", "Line", "Rule", "Severity", "Description"])
    for row in results:
        detail_ws.append([
            row["file"],
            row["line"],
            row["rule"],
            row["severity"],
            row["description"]
        ])

    # Scorecard logic
    scorecard = defaultdict(lambda: {"High": 0, "Medium": 0, "Low": 0})

    for row in results:
        file = row["file"]
        severity = row["severity"]
        scorecard[file][severity] += 1

    # Write scorecard
    summary_ws.append(["File", "High", "Medium", "Low", "Control Effectiveness"])
    for file, counts in scorecard.items():
        rating = rate_control_effectiveness(counts)
        summary_ws.append([
            file,
            counts["High"],
            counts["Medium"],
            counts["Low"],
            rating
        ])

    # Bold headers
    for sheet in [detail_ws, summary_ws]:
        for cell in sheet["1:1"]:
            cell.font = Font(bold=True)

    wb.save(output_path)
    print(f"âœ… Excel report saved to: {output_path}")

def rate_control_effectiveness(counts):
    if counts["High"] > 0:
        return "Weak"
    elif counts["Medium"] > 2:
        return "Moderate"
    else:
        return "Strong"

# --- Run the tool ---
if __name__ == "__main__":
    directory_to_scan = "agents"  # Replace with your directory
    all_issues = audit_directory(directory_to_scan)

    for issue in all_issues:
        print(f"[{issue['file']}:{issue['line']}] {issue['rule']} - {issue['severity']} - {issue['description']}")

    export_to_excel(all_issues)
